-----------------------------------------------------------------------------
Titulo: Practica 3. Arboles binarios de busqueda.

Autores: Natalia
         Jose Carlos Naharro Gordillo
         Isaac

Grupo de practicas: Martes 10:30-12:30

-----------------------------------------------------------------------------

INTRODUCCION

La practica trata de estudiar la complejidad computacional de las operaciones
insertar y buscar en arboles binarios de busqueda de numeros enteros y con un
campo con la frecuencia de apariciones.
A partir de la representacion de arboles binarios de busqueda y del codigo de
la operacion insertar, dados en el enunciado, se pide implementar una serie
de operaciones en lenguaje C. A continuacion, comprobamos que funcionan
correctamente mediante un test.

Para distintos valores de n, determinamos el tiempo que se tarda en insertar 
n numeros enteros aleatorios en el rango [−n . . . + n] en un arbol vacio; y,
seguidamente el tiempo de busqueda de otros n numeros enteros aleatorios en
el rango [−n . . . + n] en ese arbol con n elementos.
Calculamos empiricamente la complejidad computacional de las “n inserciones”
y las “n búsquedas”.

Por ultimo, analizamos los resultados obtenidos hallando las cotas 
subestimada, ajustada y sobrestimada.

-----------------------------------------------------------------------------

MAQUINA

Procesador: Intel Core 2 Duo CPU E7300 A 2.66GHz * 2
Memoria: 3.7GiB
Sistema Operativo: ubuntu 12.04 LTS 64-bits

-----------------------------------------------------------------------------

MEDICIONES DE TIEMPO

Todos los tiempos medidos estan expresados en microsegundos.

No podemos utilizar una estrategia de tiempos pequenos porque para tiempos
menores a 500 microsegundos no podemos precisar para insercion, ni siquiera
haciendo la media de K repeticiones. Explicamos el motivo detalladamente en
la conclusion. 
Buscaremos valores de n lo suficientemente altos para que no hayan
tiempos menores de 500 microsegundos independientemente de la maquina en la
que se ejecute y de la operacion buscar.

-----------------------------------------------------------------------------

DESARROLLO

Implementamos las distintas operaciones propuestas sobre arboles binarios de
busqueda en lenguaje C.
Posteriormente comprobamos que funcionan correctamente mediante un test, que
no se muestra en el presente informe.

A continuacion calculamos los tiempos de ejecucion para las operaciones de
insercion y busqueda para vectores cuyo tamano siguen una progresion 
geometrica de 2 (4000, 8000, 16000, ...).
Mostramos los tiempos de insercion y de busqueda para cada n.

Hallamos las cotas ajustadas, subestimadas y sobrestimadas.

En las siguientes tablas podemos verlo detalladamente.

Añadimos despues de cada tabla la discusion y conclusion a la vista de los
resultados obtenidos para la insercion y busqueda de n elementos.


      n       t_ins(n)       t_bus(n)
   4000            979            933
   8000           2285           2387
  16000           5497           5327
  32000          13540          15493
  64000          33945          38224
 128000          83071          97672

INSERCION DE n ELEMENTOS
-------------------------------------------------------------------
      n           T(n)      T(n)/f(n)      T(n)/g(n)      T(n)/h(n)
-------------------------------------------------------------------
   4000         979.00       0.090464       0.017221       0.003278
   8000        2285.00       0.097146       0.016099       0.002668
  16000        5497.00       0.107525       0.015513       0.002238
  32000       13540.00       0.121857       0.015305       0.001922
  64000       33945.00       0.140558       0.015368       0.001680
 128000       83071.00       0.158261       0.015064       0.001434
                          subestimada       ajustada   sobrestimada
                                         Cte = 0.015

f(n) = n^1.12
g(n) = n^1.32
h(n) = n^1.52

Discusion: para intentar evitar valores anomalos hemos ejecutado la medicion
de tiempos en 7 ocasiones. La cota ajustada se aproxima a 0.015, la cota
subestimada tiende a infinito y la cota sobrestimada tiende a 0.

Conclusion: la complejidad es O(n^1.32).


BUSQUEDA DE n ELEMENTOS
-------------------------------------------------------------------
      n           T(n)      T(n)/f(n)      T(n)/g(n)      T(n)/h(n)
-------------------------------------------------------------------
   4000         933.00       0.077723       0.014796       0.002817
   8000        2387.00       0.090699       0.015031       0.002491
  16000        5327.00       0.092324       0.013320       0.001922
  32000       15493.00       0.122477       0.015382       0.001932
  64000       38224.00       0.137828       0.015070       0.001648
 128000       97672.00       0.160640       0.015290       0.001455
                          subestimada       ajustada   sobrestimada
                                         Cte = 0.015

f(n) = n^1.1325
g(n) = n^1.3325
h(n) = n^1.5325

Discusion: para intentar evitar valores anomalos hemos ejecutado la medicion
de tiempos en 7 ocasiones. La cota ajustada se aproxima a 0.015, la cota
subestimada tiende a infinito y la cota sobrestimada tiende a 0.

Conclusion: la complejidad es O(n^1.3325).

-----------------------------------------------------------------------------

CONCLUSIONES FINALES

Despues de observar detenidamente los resultados de nuestro analisis podemos
decir que:
El calculo de las cotas ha sido costoso para ambos algoritmos. Quizas ha sido
algo mas dificil para la busqueda.
Nos llama tambien la atencion que la constante a la que se acercan ambas
operaciones es la misma.
Otra dificultad que nos hemos encontrado ha sido el calculo de tiempos 
pequenos. En la operacion de insertar tenemos que calcular el tiempo en 
eliminar e insertar y hacer la media para K = 1000 repeticiones, a eso le
tenemos que restar lo que se tarda de media en eliminar el arbol las K = 1000
veces. Aqui radica el problema ya que no podemos calcular el tiempo de 
eliminar. Por lo que optamos por tomar solo tiempos que superen los 500 
microsegundos.